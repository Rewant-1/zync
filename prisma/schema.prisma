// Prisma database schema for the application
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"  // Generate client in src for better imports
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Represents a user's project - essentially a conversation thread with the AI.
 * Each project has a unique generated name and contains multiple messages.
 */
model Project {
  id        String   @id @default(uuid())
  name      String   // Auto-generated slug like "purple-elephant"
  userId    String   // Clerk user ID for ownership
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  messages Message[] // All conversation messages in this project
}

/**
 * Message Roles
 * - USER: Messages from the human user
 * - ASSISTANT: Responses from AI agents
 */
enum MessageRole {
  USER
  ASSISTANT
}

/**
 * Message Types  
 * - RESULT: Successful completion (may have generated code)
 * - ERROR: Failed generation or system error
 */
enum MessageType {
  RESULT
  ERROR
}

/**
 * Message Model
 * 
 * Stores the conversation between user and AI agents.
 * Messages can optionally have fragments (generated code) attached.
 */
model Message {
  id        String      @id @default(uuid())
  content   String      // The actual message content
  role      MessageRole // Who sent this message
  type      MessageType // Success or error
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Foreign key relationships
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Optional: generated code fragment
  fragment Fragment?
}

/**
 * Represents generated code with live preview capabilities.
 * Created when AI successfully generates a working application.
 */
model Fragment {
  id         String @id @default(uuid())
  messageId  String @unique // One-to-one with message
  message    Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  sandboxUrl String // Live preview URL from E2B sandbox
  title      String // Short descriptive title (e.g., "Todo App")
  files      Json   // Generated file contents as JSON object
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/**
 * Credit-based rate limiting storage used by rate-limiter-flexible.
 * Tracks user consumption with automatic expiration.
 */
model Usage {
  key    String    @id      // User ID or rate limit key
  points Int                // Credits consumed
  expire DateTime?          // When credits reset (30-day rolling window)
}